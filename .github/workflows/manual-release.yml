name: Manual Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: "Skip tests (emergency only)"
        required: false
        default: false
        type: boolean

jobs:
  manual-release:
    name: Manual Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run validation
        if: ${{ !inputs.skip_tests }}
        run: npm run validate

      - name: Build and package
        run: |
          npm run build:prod
          npm run package

      - name: Bump version
        run: npm version ${{ inputs.release_type }} --no-git-tag-version

      - name: Get new version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create release commit
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore(release): v${{ steps.version.outputs.version }}"
          git tag "v${{ steps.version.outputs.version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: Manual release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload VSIX to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./find-unused-exports-${{ steps.version.outputs.version }}.vsix
          asset_name: find-unused-exports-${{ steps.version.outputs.version }}.vsix
          asset_content_type: application/zip

      - name: Publish to marketplaces
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
        run: |
          npx vsce publish --packagePath *.vsix
          npx ovsx publish *.vsix --pat $OVSX_PAT
