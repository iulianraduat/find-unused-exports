name: Release

on:
  push:
    branches: ['main', 'master', 'beta']
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      pre-release:
        description: 'Create pre-release'
        type: boolean
        default: false
      skip-tests:
        description: 'Skip tests (emergency only)'
        type: boolean
        default: false

env:
  NODE_VERSION: '22.x'

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.version.outputs.current }}
      new-version: ${{ steps.version.outputs.new }}
      changelog: ${{ steps.changelog.outputs.content }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Calculate new version
          if [ "${{ inputs.release-type }}" = "major" ]; then
            NEW_VERSION=$(npm version major --no-git-tag-version --dry-run | sed 's/v//')
          elif [ "${{ inputs.release-type }}" = "minor" ]; then
            NEW_VERSION=$(npm version minor --no-git-tag-version --dry-run | sed 's/v//')
          elif [ "${{ inputs.release-type }}" = "prerelease" ]; then
            NEW_VERSION=$(npm version prerelease --no-git-tag-version --dry-run | sed 's/v//')
          else
            NEW_VERSION=$(npm version patch --no-git-tag-version --dry-run | sed 's/v//')
          fi

          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          if [ -z "$COMMITS" ]; then
            CHANGELOG="No changes since last release"
          else
            CHANGELOG="## Changes\n\n$COMMITS"
          fi

          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for uncommitted changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ Uncommitted changes detected. Please commit or stash changes before release."
            git status
            exit 1
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate-release
    if: ${{ !github.event.inputs.skip-tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run quality checks
        uses: ./.github/actions/quality-checks

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          test-type: 'all'
          upload-coverage: 'false'

  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build extension
        uses: ./.github/actions/build-extension
        with:
          build-mode: 'package'
          upload-artifacts: 'true'
          artifact-retention-days: '90'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, test, build]
    if: always() && !failure() && !github.event.inputs.pre-release && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta')
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-url: ${{ steps.create-release.outputs.html_url }}
      tag-name: ${{ steps.create-release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version
        run: |
          npm version ${{ inputs.release-type }} --no-git-tag-version

          # Update CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
            NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
            DATE=$(date +"%Y-%m-%d")

            # Create new changelog entry
            echo "# Changelog" > CHANGELOG.new.md
            echo "" >> CHANGELOG.new.md
            echo "## [$NEW_VERSION] - $DATE" >> CHANGELOG.new.md
            echo "" >> CHANGELOG.new.md
            echo "${{ needs.validate-release.outputs.changelog }}" >> CHANGELOG.new.md
            echo "" >> CHANGELOG.new.md

            # Append existing changelog (skip first line if it's "# Changelog")
            if grep -q "^# Changelog" CHANGELOG.md; then
              tail -n +2 CHANGELOG.md >> CHANGELOG.new.md
            else
              cat CHANGELOG.md >> CHANGELOG.new.md
            fi

            mv CHANGELOG.new.md CHANGELOG.md
          fi

  beta-release:
    name: Create Beta Release
    runs-on: ubuntu-latest
    needs: [validate-release, test, build]
    if: always() && !failure() && github.ref == 'refs/heads/beta'
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-url: ${{ steps.create-release.outputs.html_url }}
      tag-name: ${{ steps.create-release.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version
        run: |
          npm version ${{ inputs.release-type }} --no-git-tag-version

          # Update CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
            NEW_VERSION="${{ needs.validate-release.outputs.new-version }}"
            DATE=$(date +"%Y-%m-%d")

            # Create new changelog entry
            echo "# Changelog" > CHANGELOG.new.md
            echo "" >> CHANGELOG.new.md
            echo "## [$NEW_VERSION] - $DATE" >> CHANGELOG.new.md
            echo "" >> CHANGELOG.new.md
            echo "${{ needs.validate-release.outputs.changelog }}" >> CHANGELOG.new.md
            echo "" >> CHANGELOG.new.md

            # Append existing changelog (skip first line if it's "# Changelog")
            if grep -q "^# Changelog" CHANGELOG.md; then
              tail -n +2 CHANGELOG.md >> CHANGELOG.new.md
            else
              cat CHANGELOG.md >> CHANGELOG.new.md
            fi

            mv CHANGELOG.new.md CHANGELOG.md
          fi

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          [ -f "CHANGELOG.md" ] && git add CHANGELOG.md
          git commit -m "chore: bump version to ${{ needs.validate-release.outputs.new-version }}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: vsix-package-*
          merge-multiple: true

      - name: Create Git tag
        run: |
          TAG_NAME="v${{ needs.validate-release.outputs.new-version }}"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin HEAD --tags

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.new-version }}
          release_name: Release v${{ needs.validate-release.outputs.new-version }}
          body: |
            ## 🚀 Release v${{ needs.validate-release.outputs.new-version }}

            ${{ needs.validate-release.outputs.changelog }}

            ### 📦 Installation

            Install from VS Code Marketplace:
            - [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=d0whc3r.find-unused-exports)
            - [Open VSX Registry](https://open-vsx.org/extension/d0whc3r/find-unused-exports)

            Or install manually using the VSIX file attached to this release.

            ### 🔧 Changes

            See the full changelog in [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          draft: false
          prerelease: ${{ inputs.pre-release }}

      - name: Upload VSIX to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./find-unused-exports-${{ needs.validate-release.outputs.new-version }}.vsix
          asset_name: find-unused-exports-${{ needs.validate-release.outputs.new-version }}.vsix
          asset_content_type: application/zip

  publish:
    name: Publish to Marketplaces
    runs-on: ubuntu-latest
    needs: [validate-release, release]
    if: ${{ !github.event.inputs.pre-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Publish extension
        uses: ./.github/actions/publish-extension
        with:
          vsce-token: ${{ secrets.VSCE_PAT }}
          ovsx-token: ${{ secrets.OVSX_PAT }}
          publish-vscode: 'true'
          publish-openvsx: 'true'
          pre-release: ${{ inputs.pre-release }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, release, publish]
    if: always()
    steps:
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const releaseStatus = '${{ needs.release.result }}' === 'success' ? '✅' : '❌';
            const publishStatus = '${{ needs.publish.result }}' === 'success' ? '✅' : 
                                 '${{ needs.publish.result }}' === 'skipped' ? '⏭️' : '❌';
            
            const comment = `## 🚀 Release Status
            
            **Version:** v${{ needs.validate-release.outputs.new-version }}
            **Type:** ${{ inputs.release-type }}
            
            ${releaseStatus} **Release:** ${releaseStatus === '✅' ? 'Success' : 'Failed'}
            ${publishStatus} **Publish:** ${publishStatus === '✅' ? 'Success' : publishStatus === '⏭️' ? 'Skipped' : 'Failed'}
            
            ${releaseStatus === '✅' ? `📦 [Download VSIX](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.new-version }})` : ''}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
      - name: Create release summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ needs.validate-release.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Previous Version:** v${{ needs.validate-release.outputs.current-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type:** ${{ inputs.release-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-release:** ${{ inputs.pre-release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.release.result }}" = "success" ]; then
            echo "✅ **GitHub Release:** [v${{ needs.validate-release.outputs.new-version }}](${{ needs.release.outputs.release-url }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GitHub Release:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "✅ **Marketplace Publication:** Success" >> $GITHUB_STEP_SUMMARY
            echo "- [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=d0whc3r.find-unused-exports)" >> $GITHUB_STEP_SUMMARY
            echo "- [Open VSX Registry](https://open-vsx.org/extension/d0whc3r/find-unused-exports)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.publish.result }}" = "skipped" ]; then
            echo "⏭️ **Marketplace Publication:** Skipped (pre-release)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Marketplace Publication:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Recent Changes" >> $GITHUB_STEP_SUMMARY
          # Limit changelog to first 10 lines to prevent GITHUB_STEP_SUMMARY overflow
          CHANGELOG="${{ needs.validate-release.outputs.changelog }}"
          echo "$CHANGELOG" | head -10 >> $GITHUB_STEP_SUMMARY
          
          # Count total lines and show truncation notice if needed
          TOTAL_LINES=$(echo "$CHANGELOG" | wc -l)
          if [ "$TOTAL_LINES" -gt 10 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "_... and $(($TOTAL_LINES - 10)) more changes. See full changelog in the release notes._" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The release process encountered an error. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Attempted Version:** v${{ needs.validate-release.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Type:** ${{ inputs.release-type }}" >> $GITHUB_STEP_SUMMARY
